#pragma once
#include "DrawInstructions.h"
#include "UnitEnum.h"
#include "SoundMap.h"
#include "DrawableObject.h"
#include "TimableObject.h"
#include "DumpableObject.h"
#include "PhysicsObject.h"
#include "UnitBodyIdHolder.h"
#include "Effects/Effect.h"
#include "CollisionManager.h"
#include <vector>
#include <string>
#include <list>
#include <memory>

class Unit : public PhysicsObject, public CollisionManager, public TimableObject
{
public:
	Unit(UnitType unitType, b2World* world, int unitId);

	// Inherited from PhysicsObject
	/* By default, Unit returns the draw instructions generated by PhysicsObject. But child classes of Unit can
		 override this to draw themselves in a unique way, and can even call PhysicsObject::getDrawInsctuctions()
		 to get the default draw instructions and then add more the list. */
	virtual std::list<DrawInstructions*>* getDrawInstructions() override;

	// Inherited from TimableObject
	virtual void timeElapsed(long long microseconds) final override;
	virtual void timeElapsedExtraBehavior(long long microseconds); // Child classes can override this to add extra behavior to the timeElapsed method.

	// Overridable methods
	void onContactBeginBasicBehavior(Unit* otherUnit, int otherBodyId, int otherFixtureId, int thisBodyId, int thisFixtureId, b2Vec2 contactNormal);
	virtual void onContactBegin(Unit* otherUnit, int otherBodyId, int otherFixtureId, int thisBodyId, int thisFixtureId, b2Vec2 contactNormal);
	void onContactEndBasicBehavior(Unit* otherUnit, int otherBodyId, int otherFixtureId, int thisBodyId, int thisFixtureId);
	virtual void onContactEnd(Unit* otherUnit, int otherBodyId, int otherFixtureId, int thisBodyId, int thisFixtureId);

	UnitType getUnitType();
	bool hasSoundInQueue();
	SoundEnum getSoundInQueue();
	void addSoundToQueue(SoundEnum sound);
	void setDebugDraw(bool turnOn);
	bool hasEffectInQueue();
	Effect* getEffectInQueue();
	int getId();
	void setToDisable();
	bool shouldDisable();

public:
	bool FlagPlayerControlled = false; // Set to true if the player should control this unit with the keyboard.
	bool FlagDestroy = false; // Set this to true when the unit should be destroyed.
	bool FlagIsStatic = false;

protected:
	void addEffectToQueue(Effect* effect);

protected:
	UnitType _unitType;
	std::list<SoundEnum> _soundIdQueue;
	bool _debugDraw;
	std::list<Effect*> _effectList;
	int _unitId;
	bool _flagShouldDisable;
};